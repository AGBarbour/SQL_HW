-- 1a. Display the first and last names of all actors from the table `actor`.;
USE sakila;
SELECT first_name, last_name FROM actor;

-- 1b. Display the first and last name of each actor in a single column in upper case letters. Name the column `Actor Name`.
SELECT UPPER(CONCAT(first_name, ',', last_name)) AS 'Actor Name' FROM actor;

-- * 2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name,\
--  "Joe." What is one query would you use to obtain this information?
SELECT first_name, last_name, actor_id FROM actor WHERE first_name='Joe';

-- 2b. Find all actors whose last name contain the letters `GEN`:
SELECT first_name, last_name, actor_id 
FROM actor WHERE last_name LIKE '%GEN%';

-- 2c. Find all actors whose last names contain the letters `LI`. This time, 
-- order the rows by last name and first name, in that order:
SELECT last_name, first_name
FROM actor 
WHERE last_name LIKE '%LI%'
ORDER BY last_name, first_name;

-- 2d. Using `IN`, display the `country_id` and `country` 
-- columns of the following countries: Afghanistan, Bangladesh, and China:
SELECT country_id, country FROM country
WHERE country IN ('Afghanistan', 'Bangladesh', 'China');

-- 3a. You want to keep a description of each actor. 
-- You don't think you will be performing queries on a description, 
-- so create a column in the table `actor` 
-- named `description` and use the data type `BLOB` 
ALTER TABLE actor
	ADD description BLOB;

-- 3b. Very quickly you realize that entering descriptions for each actor 
-- is too much effort. Delete the `description` column.
ALTER TABLE actor
	DROP description;

-- 4a. List the last names of actors, as well as 
-- how many actors have that last name.
SELECT last_name, COUNT(last_name) AS 'Surname Count'
FROM actor GROUP BY last_name
ORDER BY COUNT(last_name) DESC;

-- 4b. List last names of actors and the number of actors who have that last name, 
-- but only for names that are shared by at least two actors
SELECT last_name, COUNT(last_name) AS 'Surname Count'
FROM actor 
GROUP BY last_name
HAVING COUNT(last_name) >= 2
ORDER BY COUNT(last_name) DESC;

-- 4c. The actor `HARPO WILLIAMS` was accidentally entered in the `actor` 
-- table as `GROUCHO WILLIAMS`. Write a query to fix the record.
UPDATE actor
SET first_name='GROUCHO'
WHERE actor_id=172;

-- 4d. Perhaps we were too hasty in changing `GROUCHO` to `HARPO`. It turns 
-- out that `GROUCHO` was the correct name after all! In a single query, 
-- if the first name of the actor is currently `HARPO`, change it to `GROUCHO`.
UPDATE actor 
	SET first_name=
    (CASE 
		WHEN first_name='HARPO' and last_name='WILLIAMS'
		THEN  first_name='GROUCHO'
		ELSE first_name=first_name
	END)
WHERE actor_id=172;

-- 5a. You cannot locate the schema of the `address` table. 
-- Which query would you use to re-create it?
SHOW CREATE TABLE address;
-- copy result into query window. Rename duplicate values(table name, fk). Execute.
CREATE TABLE `address` (
   `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
   `address` varchar(50) NOT NULL,
   `address2` varchar(50) DEFAULT NULL,
   `district` varchar(20) NOT NULL,
   `city_id` smallint(5) unsigned NOT NULL,
   `postal_code` varchar(10) DEFAULT NULL,
   `phone` varchar(20) NOT NULL,
   `location` geometry NOT NULL,
   `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
   PRIMARY KEY (`address_id`),
   KEY `idx_fk_city_id` (`city_id`),
   SPATIAL KEY `idx_location` (`location`),
   CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE
 ) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8

-- 6a. Use `JOIN` to display the first and last names, as well as the address,
--  of each staff member. Use the tables `staff` and `address`:
SELECT s.first_name, s.last_name, a.address 
FROM staff s
INNER JOIN address a ON s.address_id=a.address_id;

-- 6b. Use `JOIN` to display the total amount rung up by each staff member 
-- in August of 2005. Use tables `staff` and `payment`.
SELECT s.first_name, s.last_name, SUM(p.amount) AS 'Sales Total'
FROM staff s
JOIN payment p ON s.staff_id=p.staff_id
GROUP BY p.staff_id;

-- 6c. List each film and the number of actors who are listed for that film. 
-- Use tables `film_actor` and `film`. Use inner join.
SELECT f.title, COUNT(l.film_id) AS 'Actor Count', f.film_id
FROM film f
INNER JOIN film_actor l ON f.film_id=l.film_id
GROUP BY f.film_id;

-- 6d. How many copies of the film `Hunchback Impossible`
--  exist in the inventory system?
SELECT f.title, COUNT(l.film_id) AS 'Inventory Count'
FROM film f
INNER JOIN inventory l ON f.film_id=l.film_id
GROUP BY f.film_id
HAVING f.title='HUNCHBACK IMPOSSIBLE';

-- 6e. Using the tables `payment` and `customer` and the `JOIN` command, 
-- list the total paid by each customer. List the customers alphabetically by last name:
SELECT c.first_name, c.last_name, SUM(p.amount) AS 'Purchase Total'
FROM customer c
JOIN payment p ON c.customer_id=p.customer_id
GROUP BY p.customer_id;

-- 7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. 
-- As an unintended consequence, films starting with the letters `K` and `Q` 
-- have also soared in popularity. Use subqueries to display the titles of movies
--  starting with the letters `K` and `Q` whose language is English. 
SELECT title
FROM film
WHERE title LIKE 'K%' or title LIKE 'Q%' and language_id IN (
	SELECT language_id
	FROM language
	WHERE name='English');

-- 7b. Use subqueries to display all actors who appear in the film `Alone Trip`.
SELECT first_name, last_name
FROM actor
WHERE actor_id IN 
	(
	SELECT actor_id
	FROM film_actor
	WHERE film_id IN 
		(
		SELECT film_id
		FROM film
		WHERE title='Alone Trip'
        )
    )
;
-- 7c. You want to run an email marketing campaign in Canada, for which you 
-- will need the names and email addresses of all Canadian customers. 
-- Use joins to retrieve this information.
SELECT c.first_name, c.last_name, c.email, o.country
FROM customer c
JOIN address a
ON c.address_id=a.address_id
JOIN city i
ON a.city_id=i.city_id
JOIN country o
ON i.country_id=o.country_id
WHERE country='Canada';

-- 7d. Sales have been lagging among young families, and you wish
-- to target all family movies for a promotion. Identify all movies categorized as family films.
SELECT title
FROM film
WHERE film_id IN 
	(
	SELECT film_id
	FROM film_category
	WHERE category_id IN 
		(
		SELECT category_id
		FROM category
		WHERE name='Family'
        )
    )
;

-- 7e. Display the most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) AS 'Rental Count'
FROM film f
JOIN inventory i
ON f.film_id=i.film_id
JOIN rental r
ON r.inventory_id=i.inventory_id
GROUP BY title
ORDER BY `Rental Count` DESC;

-- 7f. Write a query to display how much business, 
-- in dollars, each store brought in.
SELECT s.store_id, SUM(p.amount) AS 'Total Revenue'
FROM store s
JOIN staff f
ON s.store_id=f.store_id
JOIN payment p
ON f.staff_id=p.staff_id
GROUP BY store_id;

-- 7g. Write a query to display for each store its store ID, city, and country.
SELECT s.store_id, c.city, o.country
FROM store s
JOIN address a
ON s.address_id=a.address_id
JOIN city c
ON a.city_id=c.city_id
JOIN country o
ON c.country_id=o.country_id;

-- List the top five genres in gross revenue in descending order.
SELECT c.name, SUM(p.amount) AS 'Gross Revenue'
FROM category c
JOIN film_category f
ON c.category_id=f.category_id
JOIN inventory i
ON f.film_id=i.film_id
JOIN rental r
ON i.inventory_id=r.rental_id
JOIN payment p
ON r.rental_id=p.rental_id
GROUP BY c.name
ORDER BY `Gross Revenue` DESC
LIMIT 5;

-- 8a. In your new role as an executive, you would like to have an easy 
-- way of viewing the Top five genres by gross revenue. Use the solution 
-- from the problem above to create a view. If you haven't solved 7h, you
--  can substitute another query to create a view.
CREATE VIEW Highest_Grossing_Genres AS
SELECT c.name, SUM(p.amount) AS 'Gross Revenue'
FROM category c
JOIN film_category f
ON c.category_id=f.category_id
JOIN inventory i
ON f.film_id=i.film_id
JOIN rental r
ON i.inventory_id=r.rental_id
JOIN payment p
ON r.rental_id=p.rental_id
GROUP BY c.name
ORDER BY `Gross Revenue` DESC
LIMIT 5;

-- 8b. How would you display the view that you created in 8a?
SELECT * FROM highest_grossing_genres;

-- 8c. You find that you no longer need the view `top_five_genres`. 
-- Write a query to delete it.
DROP VIEW highest_grossing_genres;